==========
Collations
==========


This guide shows you how to use collations, a set of sorting rules, to 
run operations using string ordering for specific languages and locales (a 
community or region that shares common language idioms).

MongoDB sorts strings using *binary collation* by default. This collation
method uses the `ASCII standard <https://en.wikipedia.org/wiki/ASCII>`_ 
character values to compare and order strings. Many languages and locales have
character ordering conventions that are different from the ASCII standard.

For example, in Canadian French, the right-most accented character determines
the ordering for strings when the other characters are the same. Consider the
following French words: **cote**, **coté**, **côte**, and **côté**. 

The order in which they would appear using the default *binary
collation* is:

::

   cote
   coté
   côte
   côté

If we apply the Canadian French collation, the order is:

::

   cote
   côte
   coté
   côté

-----
Usage
-----

.. note::

   Collations are available in MongoDB 3.4 and later.

You can specify a collation when you create a **new collection** or 
**new index**.

When you create a collection with a collation, you define the default collation
for any of the :manual:`operations that support collation 
</reference/collation/#operations-that-support-collation>` called on that 
collection. You can override the collation for an operation by specifying a 
different one.

When you create an index with a collation, you specify the sort order for
operations that use that index. To use the collation in the index, you must
provide a matching collation in the operation, and the operation must use
the index.

.. note::
   
   Currently, you cannot create a collation on an existing collection. To use
   collations with an existing collection, create an index with the collation
   and specify the same collation in all your operations on that collection.

Collation Parameters
~~~~~~~~~~~~~~~~~~~~

The collation object contains the following parameters:

.. code-block:: javascript

   collation: {
     locale: <string>,
     caseLevel: <bool>,
     caseFirst: <string>,
     strength: <int>,
     numericOrdering: <bool>,
     alternate: <string>,
     maxVariable: <string>,
     backwards: <bool>
   }

You must specify the ICU Locale ID in the ``locale`` field in the collation.
For a complete list of locales and variants, see :manual:`Supported Languages 
and Locales
</reference/collation-locales-defaults/#supported-languages-and-locales>`.
All the other collation fields are optional. For descriptions of each 
field, see the :manual:`Collation Document MongoDB manual entry 
</reference/collation/#collation-document>`.

Collation Examples
------------------

Assign a Default Collation on a Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, we create a new collection called ``souvenirs`` on 
the ``sample_mflix`` database and assign a default collation with the 
``fr_CA`` locale. The collation applies to all of the :manual:`operations that 
support collation </reference/collation/#operations-that-support-collation>`
performed on that collection.

.. literalinclude:: /code-snippets/collation/collection-collation.js
   :language: javascript
   :dedent: 4

Assign a Collation to an Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, we create a new index on the ``title`` field of
the ``movies`` collection in the ``sample_mflix`` database with a collation
set to the ``en_US`` locale. 

.. literalinclude:: /code-snippets/collation/index-collation.js
   :language: javascript
   :dedent: 4

The following query uses the index we created.

.. literalinclude:: /code-snippets/collation/query-index-collation.js
   :language: javascript
   :start-after: start query index collation 
   :end-before: end query index collation
   :dedent: 4

The following queries **do not** use the index that we created.  The first 
example does not include a collation and the second contains a different
strength value than the collation on the index.

.. literalinclude:: /code-snippets/collation/query-index-collation.js
   :language: javascript
   :start-after: start query without index collation
   :end-before: end query without index collation
   :dedent: 4

Collation Query Examples
~~~~~~~~~~~~~~~~~~~~~~~~

Operations that read, update, and delete documents from a collection support
collation. This section includes examples of most of these operations.
See the MongoDB manual for a full list of :manual:`operations that support
collation </reference/collation/#operations-that-support-collation>`.

find() and sort() Example
`````````````````````````

The following example calls both ``find()`` and ``sort()`` on a collection
using a German collation with the ``locale`` parameter set to ``de``. 

findOneAndUpdate() Example
``````````````````````````

The following example uses a collection called ``names`` which contains the
following documents:

::

  { "_id" : 1, "first_name" : "Hans" }
  { "_id" : 2, "first_name" : "Gunter" }
  { "_id" : 3, "first_name" : "Günter" }
  { "_id" : 4, "first_name" : "Jürgen" }

The code below does not specify a collation

[ code here ]

[TODO]

findOneAndDelete() Example

``````````````````````````

Aggregation Example
```````````````````

To use collation with the :node-api:`aggregate </Collection.html#aggregate>`
operation, pass the collation document in the options field, after the
array of pipeline stages.


The following aggregation example uses the ``movies`` collection from the
``sample_mflix`` database and groups the ``name`` field.
Then, it counts the total number of results in each group, and sorts the results
by the German phonebook order with the ``locale`` parameter set to 
``de@collation=phonebook``.

[ Code here ] 