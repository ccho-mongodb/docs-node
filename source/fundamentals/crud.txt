===============
CRUD Operations
===============

.. default-domain:: mongodb

.. toctree::
   :caption: CRUD Operations

   /fundamentals/crud/read-operations
   /fundamentals/crud/write-operations
   /fundamentals/crud/query-document
   /fundamentals/crud/compound-operations

Overview
--------

CRUD (Create, Read, Update, Delete) operations allow you to work with
the data stored inside of MongoDB.

We categorized the CRUD operations into
two sections: :ref:`crud-read-operations` and :ref:`crud-write-operations`.
Read operations find and return documents stored within MongoDB.

Write Operations
----------------

CRUD write operations add, modify, and remove data in MongoDB. Sometimes
this means putting entirely new data into a collection, but other times
it involves changing data that already exists, or even removing it
entirely. There are three distinct write operations: create, update, and
delete. The driver offers methods for each variant of write operation:

Insert
~~~~~~

If you want to add new documents to a collection, you can use
:doc:`insertOne() </usage-examples/insertOne>` or
:doc:`insertMany() </usage-examples/insertMany>`. These methods accept a
single document or a collection of documents respectively. Note that the
driver will generate a unique ``_id`` field automatically for any
inserted documents that lack such a field.

.. example::

   A pizza restaurant creates an order every time a customer requests
   a pizza. They run the following ``insertOne()`` query on the
   ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start insert crud example
      :end-before: end insert crud example
      :dedent: 4

Update / Replace
~~~~~~~~~~~~~~~~

If you want to alter existing documents in a collection, you can use
:doc:`updateOne() </usage-examples/updateOne>`,
:doc:`replaceOne() </usage-examples/replaceOne>`, or
:doc:`updateMany() </usage-examples/updateMany>`. These methods
accept a query document that describes the documents you would like to
change and an `update document <updateDocument>`_ that describes
the changes you would like to apply to matched documents.
``replaceOne()`` uses a `replacement document
<replacementDocument>`_ that describes an entirely new document instead
of an update document. You can configure any update operation to behave
as an :doc:`upsert </fundamentals/crud/write-operations/upsert>` instead
of an update.

.. example::

   A pizza restaurant wants to modify the delivery address for an order
   that already exists. They run the following ``updateOne()`` query on
   the ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start update crud example
      :end-before: end update crud example
      :dedent: 4

Delete
~~~~~~

If you want to remove existing documents from a collection, you can
use :doc:`deleteOne() </usage-examples/deleteOne>` or
:doc:`deleteMany() </usage-examples/deleteMany>`. These methods accept a
query document that describes the documents you would like to delete.
Delete operations will delete either one (in the case of
``deleteOne()``) or all (in the case of ``deleteMany()``) documents that
match the query.

.. example::

   A pizza restaurant wants to delete a cancelled order. They run the
   following ``deleteOne()`` query on the ``orders`` collection:

   .. literalinclude:: /code-snippets/crud/pizza.js
      :language: javascript
      :start-after: start delete crud example
      :end-before: end delete crud example
      :dedent: 4

.. note::

   You can customize write operations to
   :doc:`upsert </fundamentals/crud/write-operations/upsert>` instead of
   update, time out if the method fails to complete within a certain
   period of time, and write with varying levels of resilience in a
   replica set.

Compound operations
-------------------

Some operations combine aspects of read and write operations. Consult
:doc:`compound operations </fundamentals/crud/compound-operations>` to
learn more about these hybrid methods.
