====================================
Insert, Update, or Delete a Document
====================================

.. default-domain:: mongodb

Overview
--------

You can use write operations to store, modify, or remove documents from your
MongoDB database. In this section, we show you how to call the write
operations to insert, modify, and remove documents from a collection in
your database.

Insert
------

If you want to add new documents to a collection, you can use
the ``insertOne()`` or the ``insertMany()`` method. These methods accept
single or multiple documents, respectively. The driver automatically
generates a unique ``_id`` field for documents unless specified.

You can specify the document to be inserted by the ``insertOne()`` write
operation in a JSON object as follows:

.. code-block:: javascript

   const pizzaDocument = {
     name: "Neapolitan pizza",
     shape: "round",
     toppings: [ "San Marzano tomatoes", "mozzarella di bufala cheese" ],
   };

To insert the document into the collection reference ``pizzaCollection``,
specify the document as the first parameter of your call to the
``insertOne()`` method as shown below:

.. code-block:: javascript

   pizzaCollection.insertOne(pizzaDocument);

For a runnable example, see the :doc:`insertOne() </usage-examples/insertOne>`
usage example.

You can specify the documents to be inserted by the ``insertMany()`` write
operation in an array of JSON objects as follows:

.. code-block:: javascript

   const pizzaDocuments = [
     { name: "Sicilian pizza", shape: "square" },
     { name: "New York pizza", shape: "round" },
     { name: "Grandma pizza", shape: "square" },
   ];

To insert the array of documents into the collection reference
``pizzaCollection``, specify the array as the first parameter of your call
to the ``insertMany()`` method as shown below:

.. code-block:: javascript

   pizzaCollection.insertMany(pizzaDocuments);

For a runnable example, see the :doc:`insertMany() </usage-examples/insertMany>`
usage example.


Update or Replace
-----------------

If you want to change existing documents in a collection, you can call the
``updateOne()``, ``replaceOne()`` or ``updateMany()`` method.

The ``updateOne()`` and ``updateMany()`` methods accept a query document that
matches the documents you want to change and an update document that describes
the changes you want to apply to the matched documents. The following code
snippet shows example calls to these methods:

.. code-block:: javascript

   const query = { quantity: { $lt: 5 }};
   const update = { description: "low stock" };

   const updateResult = await collection.updateOne(query, update);
   const updateManyResult = await collection.updateMany(query, update);

For a fully runnable example and more information on the available options,
see our :doc:`updateOne() </usage-examples/updateOne>` and
:doc:`updateMany() </usage-examples/updateMany>` usage examples.

The ``replaceOne()`` method accepts a query document that matches the
documents you want to change and a replacement document that describes an
entirely new document that takes the place of the first matched document.
The following code snippet shows an example call to this method:

.. code-block:: javascript

   const query = { mileage: { $gt: 15000 }};
   const replace = { brand: "Michelin", type: "tire", mileage: 0 };

   const replaceResult = await collection.replaceOne(query, replace);

For a fully runnable example and more information on the available
options, see our :doc:`replaceOne() </usage-examples/replaceOne>` usage
example.

.. note::

   You can customize write operations to
   perform an :doc:`upsert </fundamentals/crud/write-operations/upsert>`,
   time out if the method fails to complete within a certain period of time,
   and write with varying levels of resilience in a replica set.

Delete
~~~~~~

If you want to remove existing documents from a collection, you can
use :doc:`deleteOne() </usage-examples/deleteOne>` or
:doc:`deleteMany() </usage-examples/deleteMany>`. These methods accept a
query document that describes the documents you would like to delete.
Delete operations will delete either one (in the case of
``deleteOne()``) or all (in the case of ``deleteMany()``) documents that
match the query.

.. code-block:: javascript

   const deleteResult = await collection.deleteOne({ views: 0 });
   const deleteManyResult = await collection.deleteMany({ views: { $gt: 32678 }});
   
For fully runnable examples and additional information on the available
options, see our usage examples for :doc:`delete() </usage-examples/deleteOne>`
and :doc:`delete() </usage-examples/deleteMany>`.
