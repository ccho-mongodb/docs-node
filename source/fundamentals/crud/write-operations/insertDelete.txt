===========================
Insert or Delete a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this section, we show you how to call the write operations to
**insert** or **remove** documents from a collection in your MongoDB database.

Insert
------

If you want to add new documents to a collection, you can use
the ``insertOne()`` or the ``insertMany()`` method. These methods accept
single or multiple documents, respectively. The driver automatically
generates a unique ``_id`` field for documents unless specified.

You can specify the document to be inserted by the ``insertOne()`` write
operation in a JSON object as follows:

.. code-block:: javascript

   const pizzaDocument = {
     name: "Neapolitan pizza",
     shape: "round",
     toppings: [ "San Marzano tomatoes", "mozzarella di bufala cheese" ],
   };

To insert the document into the collection reference ``pizzaCollection``,
specify the document as the first parameter of your call to the
``insertOne()`` method as shown below:

.. code-block:: javascript

   pizzaCollection.insertOne(pizzaDocument);

For a runnable example, see the :doc:`insertOne() </usage-examples/insertOne>`
usage example.

You can specify the documents to be inserted by the ``insertMany()`` write
operation in an array of JSON objects as follows:

.. code-block:: javascript

   const pizzaDocuments = [
     { name: "Sicilian pizza", shape: "square" },
     { name: "New York pizza", shape: "round" },
     { name: "Grandma pizza", shape: "square" },
   ];

To insert the array of documents into the collection reference
``pizzaCollection``, specify the array as the first parameter of your call
to the ``insertMany()`` method as shown below:

.. code-block:: javascript

   pizzaCollection.insertMany(pizzaDocuments);

For a runnable example, see the :doc:`insertMany() </usage-examples/insertMany>`
usage example.

Delete
------

If you want to remove existing documents from a collection, you can
use ``deleteOne()`` to remove one document or ``deleteMany()`` for one or
more documents. These methods accept a query document that matches the
documents you want to delete. See the following code snippet for the
syntax of each method:

.. code-block:: javascript

   const deleteResult = await collection.deleteOne({ views: 0 });
   const deleteManyResult = await collection.deleteMany({ views: { $gt: 32678 }});

For fully runnable examples and additional information on the available
options, see our usage examples for
:doc:`deleteOne() </usage-examples/deleteOne>` and
:doc:`deleteMany() </usage-examples/deleteMany>`.
