==========
Monitoring
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecols

Overview
--------

This guide shows you how to monitor topology events in a MongoDB instance,
replica set, or sharded cluster. Topology events, also known as Server
Discovery and Monitoring (SDAM) events, are created by the driver when there is
a change in the state of the instance or cluster that you are connected to.
For example, when a new connection is established or a new primary is elected,
an event is created.

Read this guide if you need to record topology changes in your application or
want to explore the information provided in these events.

Event Descriptions
------------------

The following table lists all the SDAM events that are made available to your
application by the driver:

.. list-table::
   :header-rows: 1

   * - Event Name
     - Description

   * - ``serverOpening``
     - Created when a connection to an instance is established.

   * - ``serverClosed``
     - Created when a connection to an instance is closed.

   * - ``serverDescriptionChanged``
     - Created when an instance state changes (such as from secondary to
       primary).

   * - ``topologyOpening``
     - Created before any instance connections are attempted.

   * - ``topologyClosed``
     - Created after all instance connections in the topology are closed.

   * - ``topologyDescriptionChanged``
     - Created when the topology changes, such as a new primary being
       elected or a **mongos** proxy disconnecting.

       *Not applicable to a single instance.*

   * - ``serverHeartbeatStarted``
     - Created prior to issuing an ``isMaster`` command to a MongoDB instance.

       *Not applicable to a single instance.*

   * - ``serverHeartbeatSucceeded``
     - Created when a successful response to the ``isMaster`` command is
       returned by a MongoDB instance.

       *Not applicable to a single instance.*

   * - ``serverHeartbeatFailed``
     - Created when an ``isMaster`` command issued to a specific MongoDB
       instance fails to return a successful response

       *Not applicable to a single instance.*


Event Subscription Example
--------------------------

You can access SDAM events through the driver by subscribing to the event
in your application. The following example demonstrates connecting to a
replica set and subscribing to all the SDAM events created by the MongoDB
deployment:

.. code-block:: js

   const { MongoClient } = require("mongodb");

   // Connection URI
   const uri = "mongodb+srv://<clusterUrl>/?replicaSet=rs";
   const client = new MongoClient(uri);

   client.on("serverDescriptionChanged", event => {
     printEvent("serverDescriptionChanged", event);
   });

   client.on("serverHeartbeatStarted", event => {
     printEvent("serverHeartbeatStarted", event);
   });

   client.on("serverHeartbeatSucceeded", event => {
     printEvent("serverHeartbeatSucceeded", event);
   });

   client.on("serverHeartbeatFailed", event => {
     printEvent("serverHeartbeatFailed", event);
   });

   client.on("serverOpening", event => {
     printEvent("serverOpening", event);
   });

   client.on("serverClosed", event => {
     printEvent("serverClosed", event);
   });

   client.on("topologyOpening", event => {
     printEvent("topologyOpening", event);
   });

   client.on("topologyClosed", event => {
     printEvent("topologyClosed", event);
   });

   client.on("topologyDescriptionChanged", event => {
     printEvent("topologyDescriptionChanged", event);
   });

   // helper function that prints the event
   function printEvent(name, event) {
     console.log(`received ${name}: ${JSON.stringify(event, null, 2)}`);
   }

   async function run() {
     try {
       await client.connect();

       // Establish and verify connection
       await client.db("admin").command({ ping: 1 });
       console.log("Connected successfully");
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }
   run().catch(console.dir);

Example Event Documents
-----------------------

The following sections show sample output for each type of SDAM event.

``serverDescriptionChanged``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: js

  ServerDescriptionChangedEvent {
     topologyId: 0,
     address: 'localhost:27017',
     previousDescription: ServerDescription {
       address: 'localhost:27017',
       error: null,
       roundTripTime: 0,
       lastUpdateTime: 1571251089030,
       lastWriteDate: null,
       opTime: null,
       type: 'Unknown',
       minWireVersion: 0,
       maxWireVersion: 0,
       hosts: [],
       passives: [],
       arbiters: [],
       tags: []
     },
     newDescription: ServerDescription {
       address: 'localhost:27017',
       error: null,
       roundTripTime: 0,
       lastUpdateTime: 1571251089051,
       lastWriteDate: 2019-10-16T18:38:07.000Z,
       opTime: { ts: Timestamp, t: 18 },
       type: 'RSPrimary',
       minWireVersion: 0,
       maxWireVersion: 7,
       maxBsonObjectSize: 16777216,
       maxMessageSizeBytes: 48000000,
       maxWriteBatchSize: 100000,
       me: 'localhost:27017',
       hosts: [ 'localhost:27017' ],
       passives: [],
       arbiters: [],
       tags: [],
       setName: 'rs',
       setVersion: 1,
       electionId: ObjectID,
       primary: 'localhost:27017',
       logicalSessionTimeoutMinutes: 30,
       '$clusterTime': ClusterTime
     }
   }

The ``type`` field of the ``ServerDescription`` object in this event contains
one of the following possible values:

.. list-table::
   :header-rows: 1

   * - Type
     - Description
   * - ``Unknown``
     - Unknown instance
   * - ``Standalone``
     - Standalone instance
   * - ``Mongos``
     - Mongos proxy instance
   * - ``PossiblePrimary``
     - At least one server recognizes this as the primary, but still needs to
       be verified
   * - ``RSPrimary``
     - Primary instance
   * - ``RSSecondary``
     - Secondary instance
   * - ``RSArbiter``
     - Arbiter instance
   * - ``RSOther``
     - See the `RSGhost specification <https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#rsghost-and-rsother>`_
       for more details
   * - ``RSGhost``
     - See the `RSOther specification <https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#rsghost-and-rsother>`_
       for more details

serverHeartbeatStarted
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: js

   ServerHeartbeatStartedEvent {
     connectionId: 'localhost:27017'
   }

serverHeartbeatSucceeded
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: js

   ServerHeartbeatSucceededEvent {
     duration: 1.939997,
     reply:{
       hosts: [ 'localhost:27017' ],
       setName: 'rs',
       setVersion: 1,
       ismaster: true,
       secondary: false,
       primary: 'localhost:27017',
       me: 'localhost:27017',
       electionId: ObjectID,
       lastWrite: {
         opTime: { ts: [Timestamp], t: 18 },
         lastWriteDate: 2019-10-16T18:38:17.000Z,
         majorityOpTime: { ts: [Timestamp], t: 18 },
         majorityWriteDate: 2019-10-16T18:38:17.000Z
       },
       maxBsonObjectSize: 16777216,
       maxMessageSizeBytes: 48000000,
       maxWriteBatchSize: 100000,
       localTime: 2019-10-16T18:38:19.589Z,
       logicalSessionTimeoutMinutes: 30,
       minWireVersion: 0,
       maxWireVersion: 7,
       readOnly: false,
       ok: 1,
       operationTime: Timestamp,
       '$clusterTime': ClusterTime
     },
     connectionId: 'localhost:27017'
   }

serverHeartbeatFailed
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: js

   ServerHeartbeatFailed {
     duration: 20,
     failure: MongoError('some error'),
     connectionId: 'localhost:27017'
   }

serverOpening
^^^^^^^^^^^^^

.. code-block:: js

   ServerOpeningEvent {
     topologyId: 0,
     address: 'localhost:27017'
   }

serverClosed
^^^^^^^^^^^^

.. code-block:: js

   ServerClosedEvent {
     topologyId: 0,
     address: 'localhost:27017'
   }

topologyOpening
^^^^^^^^^^^^^^^

.. code-block:: js

   TopologyOpeningEvent {
     topologyId: 0
   }

topologyClosed
^^^^^^^^^^^^^^

.. code-block:: js

   TopologyClosedEvent {
     topologyId: 0
   }

topologyDescriptionChanged
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: js

   TopologyDescriptionChangedEvent {
     topologyId: 0,
     previousDescription: TopologyDescription {
       type: 'ReplicaSetNoPrimary',
       setName: null,
       maxSetVersion: null,
       maxElectionId: null,
       servers: Map {
         'localhost:27017' => ServerDescription
       },
       stale: false,
       compatible: true,
       compatibilityError: null,
       logicalSessionTimeoutMinutes: null,
       heartbeatFrequencyMS: 10000,
       localThresholdMS: 15,
       options: Object,
       error: undefined,
       commonWireVersion: null
     },
     newDescription: TopologyDescription {
       type: 'ReplicaSetWithPrimary',
       setName: 'rs',
       maxSetVersion: 1,
       maxElectionId: null,
       servers: Map {
         'localhost:27017' => ServerDescription
       },
       stale: false,
       compatible: true,
       compatibilityError: null,
       logicalSessionTimeoutMinutes: 30,
       heartbeatFrequencyMS: 10000,
       localThresholdMS: 15,
       options: Object,
       error: undefined,
       commonWireVersion: 7
     }
   }

The ``type`` field of the ``TopologyDescription`` object in this event contains
one of the following possible values:

.. list-table::
   :header-rows: 1

   * - Type
     - Description

   * - ``Single``
     - Single standalone instance

   * - ``ReplicaSetWithPrimary``
     - Replica set with a primary

   * - ``ReplicaSetNoPrimary``
     - Replica set with no primary

   * - ``Sharded``
     - Sharded cluster

   * - ``Unknown``
     - Unknown topology
