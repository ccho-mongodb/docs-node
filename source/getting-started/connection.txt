================
Connection Guide
================

.. default-domain:: mongodb

Overview
--------

This guide shows you how to connect to MongoDB with the Node.js driver using
different connection mechanisms and configure the connection settings.

When you connect to a MongoDB server, you provide your credentials and
specific connection mechanism to the driver. The driver negotiates with the
server to verify your identity, and the server grants you permissions
appropriate to your user. If you need to set up a new user or user 
permissions on your MongoDB server, see the **Authentication** and
 **Authorization** sections in the 
 `Security <https://docs.mongodb.com/manual/security/>`_ server manual.

The Node.js driver can connect to MongoDB using any of the `authentication
mechanisms 
<https://docs.mongodb.com/manual/core/authentication/#authentication-mechanisms>`_
supported by either MongoDB Community or Enterprise edition which includes:

- ``DEFAULT``
- ``SCRAM-SHA-256``
- ``SCRAM-SHA-1``
- ``MONGODB-CR``
- ``X509``
- ``Kerberos (GSSAPI/SSPI)`` *(MongoDB Enterprise only)*
- ``LDAP (PLAIN)`` *(MongoDB Enterprise only)*

Connection Mechanisms
---------------------

In this section, you can find descriptions and sample code for connecting to
a MongoDB server using each of the connection mechanism settings.

DEFAULT
~~~~~~~

The ``DEFAULT`` option is a fallback setting that attempts to authenticate
a user and password using one of the challenge-response authentication 
mechanisms in the following order:

#. ``SCRAM-SHA-256``
#. ``SCRAM-SHA-1``
#. ``MONGODB-CR``

For example, if the ``DEFAULT`` option is specified, the driver attempts to 
authenticate using ``SCRAM-SHA-256``. If the server does not support
that mechanism, the driver attempts to authenticate using
``SCRAM-SHA-1``. If the server does not support that mechanism either, the 
driver attempts to authenticate using ``MONGODB-CR``.  For more information on
the challenge-response authentication mechanisms that MongoDB supports, see the
 `SCRAM <https://docs.mongodb.com/manual/core/security-scram/>`_
section of the server manual.

You can specify this option by omitting the ``authMechanism`` parameter of the
`URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>`_ or by setting
it to the value ``DEFAULT`` as shown in the following sample code.

.. important::
   The user and password should always be **URI** encoded using ``encodeURIComponent`` to ensure any non URI compliant user or password characters are correctly parsed.

.. code-block:: js
   :emphasize-lines: 5

   const { MongoClient } = require('mongodb');

   const user = encodeURIComponent('dave');
   const password = encodeURIComponent('abc123');
   const authMechanism = 'DEFAULT';

   // Connection URL
   const url = `mongodb+srv://${user}:${password}@localhost:27017/?authMechanism=${authMechanism}`;

   // Create a new MongoClient
   const client = new MongoClient(url);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

SCRAM-SHA-256
~~~~~~~~~~~~~

https://docs.mongodb.com/manual/core/security-scram/#scram-mechanisms

.. note::

   ``SCRAM-SHA-256`` is the default authentication method for MongoDB starting
   in version 4.0

To explicitly connect to MongoDB using `SCRAM-SHA-256
<https://docs.mongodb.com/manual/core/security-scram/>`_ , specify
``SCRAM-SHA-256`` as the mechanism in the `URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>` .

Include the name and password and the `authentication database
<https://docs.mongodb.com/manual/core/security-users/#user-authentication-database>`_
(\ ``authSource``\ ) in the connection string.

In the following example, the connection string specifies the user ``dave``\ ,
password ``abc123``\ , authentication mechanism ``SCRAM-SHA-256``\ , and
authentication database ``myprojectdb``

.. code-block:: js

   const { MongoClient } = require('mongodb');

   // Connection URL
   const url = 'mongodb+srv://dave:abc123@localhost:27017/?authMechanism=SCRAM-SHA-256&authSource=myprojectdb';

   // Create a new MongoClient
   const client = new MongoClient(url);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

SCRAM-SHA-1
~~~~~~~~~~~

.. note::
   ``SCRAM-SHA-1`` is the default authentication method for MongoDB versions 3.0, 3.2, 3.4, and 3.6.

To explicitly connect to MongoDB using `SCRAM-SHA-1
<https://docs.mongodb.com/manual/core/security-scram/>`_ , specify
``SCRAM-SHA-1`` as the mechanism in the `URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>`_.

Include the name and password and the `authentication database
<https://docs.mongodb.com/manual/core/security-users/#user-authentication-database>`_ (\ ``authSource``\ ) in the connection string.

In the following example, the connection string specifies the user ``dave``\ , password ``abc123``\ , authentication mechanism ``SCRAM-SHA-1``\ , and authentication database ``myprojectdb``

.. code-block:: js

   const { MongoClient } = require('mongodb');

   // Connection URL
   const url = 'mongodb+srv://dave:abc123@localhost:27017/?authMechanism=SCRAM-SHA-1&authSource=myprojectdb';

   // Create a new MongoClient
   const client = new MongoClient(url);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

MONGODB-CR
~~~~~~~~~~

.. warning::
   MONGODB-CR was deprecated starting in MongoDB 3.6, and is no longer supported as of MongoDB 4.0

To explicitly connect to MongoDB using ``MONGODB-CR`` , specify
``MONGODB-CR`` as the mechanism in the `URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>`_.

Include the name and password and the `authentication database
<https://docs.mongodb.com/manual/core/security-users/#user-authentication-database>`_
(\ ``authSource``\ ) in the connection string.

In the following example, the connection string specifies the user ``dave``\ ,
password ``abc123``\ , authentication mechanism ``MONGODB-CR``\ , and
authentication database ``myprojectdb``.

.. code-block:: js

   const { MongoClient } = require('mongodb');

   // Connection URL
   const url = 'mongodb+srv://dave:abc123@localhost:27017/?authMechanism=MONGODB-CR&authSource=myprojectdb';

   // Create a new MongoClient
   const client = new MongoClient(url);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

.. important::
   If you have `upgraded the authentication schema
   <https://docs.mongodb.com/manual/release-notes/3.0-scram/>`_ from ``MONGODB-CR`` to ``SCRAM-SHA-1``\ , ``MONGODB-CR`` credentials will fail to authenticate.

X509
~~~~

With  `X.509 <https://docs.mongodb.com/manual/core/security-x.509>`_
mechanism, MongoDB uses the X.509 certificate presented during TLS
negotiation to authenticate a user whose name is derived from the
distinguished name of the X.509 certificate.

X.509 authentication requires the use of TLS connections with certificate validation and is available in MongoDB 2.6 and newer.

To connect using the X.509 authentication mechanism, specify
``MONGODB-X509`` as the mechanism in the `URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>`_,
``tls=true``\ , and the username. Use ``enodeURIComponent`` to encode the username string.

In addition to the connection string, pass to the new ``MongoClient`` a
connections options for the ``server`` with the X.509 certificate and other
`TLS/SSL connections
<https://mongodb.github.io/node-mongodb-native/3.4/tutorials/connect/tls/>`_
options.

.. code-block:: js

   const { MongoClient } = require('mongodb');
   const fs = require('fs');

   // User name
   const userName = encodeURIComponent('CN=client,OU=kerneluser,O=10Gen,L=New York City,ST=New York,C=US');
   const url = `mongodb+srv://${userName}:${password}@server:27017?authMechanism=MONGODB-X509&tls=true`;

   // Create a new MongoClient
   const client = new MongoClient(url, {
     tlsCertificateKeyFile: `${__dirname}/certs/x509/client.pem`,
   });

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

For more information on connecting to MongoDB instance, replica set, and
sharded cluster with TLS/SSL options, see `TLS/SSL connections
<https://mongodb.github.io/node-mongodb-native/3.4/tutorials/connect/tls/>`_.

For more information on determining the *subject* name from the X.509
certificate, see the MongoDB manual
`X.509 tutorial
<https://docs.mongodb.com/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user>`_.

Kerberos (GSSAPI/SSPI)
~~~~~~~~~~~~~~~~~~~~~~

`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_ 
supports proxy authentication through a Kerberos service. The Node.js driver
supports Kerberos on UNIX via the MIT Kerberos library and on Windows via the
SSPI API.

To connect using the GSSAPI authentication mechanism, specify
``authMechanism=GSSAPI`` as the mechanism in the `URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>`_. Specify the user principal and the service
name in the connection string.  Use ``encodeURIComponent`` to encode the user
principal string.

The following example connects to MongoDB using Kerberos for UNIX.

.. code-block:: js

   const { MongoClient } = require('mongodb');

   // KDC Server
   const server = 'mongo-server.example.com';
   const principal = 'drivers@KERBEROS.EXAMPLE.COM';
   const urlEncodedPrincipal = encodeURIComponent(principal);

   const url = `mongodb+srv://${urlEncodedPrincipal}@${server}/?authMechanism=GSSAPI&gssapiServiceName=mongodb`;

   const client = new MongoClient(url);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

.. note::
   The method refers to the ``GSSAPI`` authentication mechanism instead of ``Kerberos`` because technically the driver authenticates via the :rfc:`GSSAPI <4752>` SASL mechanism.

LDAP (PLAIN)
~~~~~~~~~~~~

`MongoDB Enterprise <http://www.mongodb.com/products/mongodb-enterprise>`_
supports proxy authentication through a Lightweight Directory Access Protocol
(LDAP) service.

To connect using the LDAP authentication mechanism, specify
``authMechanism=PLAIN`` as the mechanism in the `URI ConnectionString
<https://docs.mongodb.com/manual/reference/connection-string/>`_.

.. code-block:: js

   const { MongoClient } = require('mongodb');

   // LDAP Server
   const server = 'ldap.example.com';
   const user = 'ldap-user';
   const pass = 'ldap-password';

   // Url
   const url = `mongodb+srv://${user}:${pass}@${server}?authMechanism=PLAIN&maxPoolSize=1`;

   // Client
   const client = new MongoClient(url);

   // Function to connect to the server
   async function run() {
     try {
       // Connect the client to the server
       await client.connect();
       console.log('Connected successfully to server');
     } finally {
       // Ensures that the client will close when you finish/error
       await client.close();
     }
   }

   // Runs your code
   run();

.. note::
   The method refers to the ``PLAIN`` authentication mechanism instead of
   ``LDAP`` because technically the driver authenticates via the :rfc:`PLAIN
   <4616>` SASL mechanism.
