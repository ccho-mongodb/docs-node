===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

*Estimated time to complete this guide: 35 minutes.*

This guide shows you how to create an application that uses the
**Node.js driver** to connect to a **MongoDB Atlas cluster**.

The Node.js driver is an interface through which you can connect to and
communicate with MongoDB instances. If you prefer to connect to MongoDB using
a different programming language, select from the ones on our
:driver:`drivers documentation page <>`.

MongoDB Atlas is a fully-managed cloud database service that hosts your data
on MongoDB instances. We show you how to get started with your own free (no
credit card required) instance in this guide.

Follow the steps below to connect your Node.js application with a MongoDB
instance.

Set up Your Project
-------------------

Install Node and NPM
~~~~~~~~~~~~~~~~~~~~

Ensure your system has Node.js version 8 or later and a compatible version of
NPM (Node Package Manager) installed. For more information on how to check
your version of Node and NPM and installation instructions for your
system, see `downloading and installing Node.js and npm
<https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_.

Initialize the Project
~~~~~~~~~~~~~~~~~~~~~~

After you verify that you installed the required version of Node and a
compatible version of NPM, create a new project.

First, create a directory for your project in your command line interface:

.. code-block:: none

   mkdir node_quickstart

Then, navigate into that directory so you can work directly with your
project's files:

.. code-block:: none

  cd node_quickstart

Next, set up NPM for your project by running the following command.
This command creates a file called ``package.json``:

.. code-block:: none

  npm init -y

.. admonition:: Why the -y?
  :class: note

  If you specify the ``-y`` option in the command, NPM automatically
  accepts the default values for the command. Omit the ``-y`` flag to
  interactively select your project settings.

Add MongoDB as a Dependency
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, add the offical Node.js MongoDB driver to your project dependencies. Use
NPM to download and install the ``mongodb`` package and provide the ``--save``
option as shown below to save the dependency to the ``package.json`` file
that you generated in the previous step.

.. code-block:: none

  npm install --save mongodb

This command downloads ``mongodb`` package and dependencies required for its
installation and saves them into a directory called ``node_modules`` in
your project directory.

At this point, you should have appropriate versions of Node.js and NPM
installed as well as a project directory that contains the dependencies you
need to use the Node.js MongoDB driver.

Create a MongoDB Cluster
------------------------

Set up a Free Tier Cluster in Atlas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After installing the Node MongoDB driver, create a MongoDB instance to store
and manage your data. Go through the
:atlas:`Get Started with Atlas <getting-started>` guide to set up a new
Atlas account, free tier cluster (MongoDB instance), load datasets, and
interact with the data.

After completing the steps in the Atlas guide, you should have a new MongoDB
cluster deployed in Atlas, a new database user, and sample datasets loaded
into your cluster.

Connect to your Cluster
-----------------------

In this step, we create and run an application that uses the Node.js MongoDB
driver to connect to your instance of MongoDB and run a query on the sample
data.

To connect to Atlas using the Node.js driver, we provide instructions to the
driver on where and how to connect to your instance in a string called the
*connection string*.

Follow the
:atlas:`Connect via Driver <driver-connection>` guide for instructions on
how to set up a user and retrieve your connection string.

Once you have your connection string, create a file called ``index.js`` in
your ``node_quickstart`` directory. Add the following code, replacing the
``uri`` variable with your connection string.

.. code-block:: js

  const { MongoClient } = require("mongodb");

  // Replace the uri string with your MongoDB deployment's connection string.
  const uri =
    "mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&w=majority&useUnifiedTopology=true";

  const client = new MongoClient(uri);

  async function run() {
    try {
      await client.connect();

      const database = client.db('sample_mflix');
      const collection = database.collection('movies');

      // Query for a movie that has the title 'Back to the Future'
      const query = { title: 'Back to the Future' };
      const movie = await collection.findOne(query);

      console.log(movie);
    } finally {
      // Ensures that the client will close when you finish/error
      await client.close();
    }
  }
  run().catch(console.dir);

Run the sample code with the following command from your command line:

.. code-block:: none

  node index.js

When you run the command, the sample code should output the details of the
movie which resembles the following:

::

   {
     _id: ...,
     plot: 'A young man is accidentally sent 30 years into the past...',
     genres: [ 'Adventure', 'Comedy', 'Sci-Fi' ],
     ...
     title: 'Back to the Future',
     ...
   }

After completing this step, you should have a working application that uses
the Node.js driver to connect to your MongoDB instance, run a query on the
sample data, and prints out the result.

Next Steps
----------

Learn how to read and modify data using the Node.js driver in our
:doc:`CRUD fundamentals </fundamentals/crud>` guide, or how to perform common
operations from our :doc:`usage examples </usage-examples>`.
