===========
Quick Start
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

*Estimated time to complete this guide: 35 minutes.*

This guide shows you how to create an application that uses the Node.js
driver to connect to a MongoDB Atlas cluster.

TODO: What is Node and what is a driver.
TODO: Explain what the steps are below.

Set up Your Development Environment
-----------------------------------

Install Node and NPM
~~~~~~~~~~~~~~~~~~~~

Ensure your system has Node version 8 or later and a compatible version of
NPM (Node Package Manager) installed. For more information on how to check
your version of Node and NPM and installation instructions for your
system, see `downloading and installing Node.js and npm
<https://docs.npmjs.com/downloading-and-installing-node-js-and-npm>`_.

Initialize the Project
~~~~~~~~~~~~~~~~~~~~~~

After you verify that you installed the required version of Node and a
compatible version of NPM, create a new project.

First, create a directory for your project in your command line interface:

.. code-block:: none

   mkdir node_quickstart

Then, navigate into that directory so you can work directly with your
project's files:

.. code-block:: none

  cd node_quickstart

Next, set up NPM for your project by running the following command.
This command creates a file called ``package.json``:

.. code-block:: none

  npm init -y

.. admonition:: Why the -y?
  :class: note

  If you specify the ``-y`` option in the command, NPM automatically
  accepts the default values for the command. Omit the ``-y`` flag to
  interactively select your project settings.

Add MongoDB as a Dependency
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next, add the offical Node MongoDB driver to your project dependencies. Use
NPM to download and install the ``mongodb`` package and provide the ``--save``
option as shown below to save the dependency to the ``package.json`` file
that you generated in the previous step.

.. code-block:: sh

  npm install --save mongodb

This command downloads ``mongodb`` package and dependencies required for its
installation and saves them into a directory called ``node_modules`` in
your project directory.

Create a MongoDB Cluster
------------------------

Set up a Free Tier Cluster in Atlas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

After installing the Node MongoDB driver, create a MongoDB instance to store
and manage your data. You can get started with a free one on MongoDB Atlas,
no credit card required. Go through the
:atlas:`Get Started with Atlas <getting-started>` guide to set up a new
Atlas account, free tier cluster (MongoDB instance), load datasets, and
interact with the data.

The next step demonstrates how to query your instance using the Node driver.

Connect to your Cluster
-----------------------

In this step, we run a code snippet to test your environment's connection
to your instance of MongoDB and run a query on the sample data.

To connect to Atlas using the Node driver, we provide the driver with
instructions on where to connect and authentication credentials. We provide
the driver with this information in the *connection string*. Follow the
:atlas:`Connect via Driver <driver-connection>` guide for instructions on
how to set up a user and retrieve your connection string.

Once you have your connection string, create a file in your
``node_quickstart`` directory called ``index.js`` and add the following code:

.. code-block:: js

  const { MongoClient } = require("mongodb");

  // Replace the uri string with your MongoDB deployment's connection string.
  const uri =
    "mongodb+srv://<user>:<password>@<cluster-url>?retryWrites=true&w=majority&useUnifiedTopology=true";

  const client = new MongoClient(uri);

  async function run() {
    try {
      // Connect the client to the server
      await client.connect();

      const database = client.db('sample_mflix');
      const collection = database.collection('movies');

      // Query for a movie that has the title 'Sweet Smell of Success'
      const query = { title: 'Sweet Smell of Success' };
      const movie = await collection.findOne(query);

      console.log(movie);
    } finally {
      // Ensures that the client will close when you finish/error
      await client.close();
    }
  }
  run().catch(console.dir);

Run the sample code with the following command from your command line:

.. code-block:: sh

  node index.js

When you run the command, the sample code should output the details of the
movie with the title: "Sweet Smell of Success".

Next Steps
----------

Learn how to read and modify data in our :doc:`CRUD fundamentals
</fundamentals/crud>` guide, or how to perform common operations in our
:doc:`usage examples </usage-examples>`.
