=================
Watch for Changes
=================

.. default-domain:: mongodb

Open a Change Stream
--------------------

You can keep track of changes to data in MongoDB, such as changes to a
collection, database, or deployment, by opening a ``change stream``. A change
stream allows applications to watch for changes to data and react to them.
You can open a change stream by calling ``watch()`` method on
a ``Collection``, ``Db``, or ``MongoClient`` object. The change stream
returns ``change event`` documents when they occur.

The ``watch()`` method optionally takes an ``aggregation pipeline`` which
consists of an array of ``stages`` as the first parameter to filter and
transform the change events output. The ``watch()`` method accepts an
additional ``options`` object as the second parameter.

The ``watch()`` method returns an instance of a ``ChangeStream``. You can
call methods on the ChangeStream such as ``hasNext()`` to check for remaining
documents in the stream, ``next()`` to request the next document in the
stream, ``resumeToken()`` to request a token that you can use to resume
listening to the change stream, and ``close()`` to close the ChangeStream.
You can also attach listener functions by calling the ``on()`` method on the
instance. See the link to the ``ChangeStream`` API documentation below for
more details on the available methods.

Visit the following resources for additional material on the classes and
methods presented above:

- :manual:`change streams </changeStreams/>`
- :manual:`change events </reference/change-events/>`
- :manual:`aggregation pipeline </reference/operator/aggregation-pipeline/>`
- :manual:`aggregation stages </changeStreams/#modify-change-stream-output>`
- :node-api:`ChangeStream class API documentation <api/ChangeStream.html>`
- :node-api:`Collection.watch() </Collection.html#watch>`,
  :node-api:`Db.watch() </Db.html#watch>`,
  :node-api:`MongoClient.watch() API documentation </MongoClient.html#watch>`

Process the Change Stream Events
--------------------------------

You can capture events from a change stream using a listener function. Call
the ``watch()`` command to get a ``ChangeStream`` instance. Add your listener
function by calling the ``on()`` method on the instance, inherited from
the Javascript ``EventEmitter`` class. Pass the string ``"change"`` as the
first parameter and add your callback function as the second parameter as
shown below:

.. code-block:: javascript

   changeStream.on("change", (changeEvent) => { /* your callback function */ });

The callback function triggers when a change event is emitted. You can
specify logic in the callback to process the event document when it is
received.

To stop processing change events, call the
:node-api:`close() </ChangeStream.html#close>` method on the ``ChangeStream``
instance. This closes the change stream and frees resources.

.. code-block:: javascript

   changeStream.close();

.. note::

   For update operation change events, change streams only return the modified
   fields by default rather than the full updated document. You can configure
   your change stream to also return the most current version of the document
   by setting the ``fullDocument`` field of the options object to
   ``"updateLookup"`` as follows:

   .. code-block:: javascript

      const changeStream = await collection.watch();
      const options = { fullDocument: "updateLookup" };
      changeStream.on("change", callbackFunction, options);

Example
-------

The following example opens a change stream on the ``movies`` collection in
the ``sample_mflix`` database. Let's create a listener function to receive and
print change events that occur on the collection.

First, open the change stream on the collection and then define a callback
on the change stream using the ``on()`` method. Once set, generate a change
event to be emitted by performing a change to the collection.

To generate the change event on the collection, let's use ``insertOne()``
method to add a new document. Since the ``insertOne()`` may run before the
listener function can register, we use a timer, declared with ``setTimeout()``
to wait one second before executing the insert.

We also use a second timer to wait an additional second after the insertion of
the document to provide ample time for the change event to be received and
the for the callback to complete its execution before closing the
``ChangeStream`` instance using the ``close()`` method.

.. note::

   The timers are only necessary for this example to ensure sufficient
   time to register the listener and have the callback process the event
   before exiting.

.. include:: /includes/connect-guide-note.rst

.. literalinclude:: /code-snippets/usage-examples/changeStream.js
  :language: javascript

