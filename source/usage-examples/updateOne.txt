=================
Update a Document
=================

.. default-domain:: mongodb

You can update a single document using the :node-api:`collection.updateOne()
<Collection.html#updateOne>` method. ``updateOne()`` accepts a filter
document and a update document. If the query matches documents in the
collection, it replaces the matches with the replacement document. The
update document requires an
:manual:`Update Operator </reference/operator/update/#update-operators>`
to modify a field in a document.

You can specify additional query options using the ``options`` object
passed as the second parameter of the ``updateOne()`` method.
Set the ``upsert`` option to ``true`` to create a new document
if no documents match the filter. For additional information, see the
:node-api:`updateOne() API documentation <Collection.html#updateOne>`.

The ``updateOne()`` method returns a :mdn:`Promise
<Web/JavaScript/Reference/Global_Objects/Promise>`
that resolves to an object. You can use the ``modifiedCount`` field of this
object to check the number of documents updated by the operation. Since
``updateOne()`` can only update a single document, ``modifiedCount`` can
have a value of either ``0`` or ``1``.

``updateOne()`` throws an exception if an error occurs during execution.
If you specify a value in your update document for the immutable field
``_id``, the method throws an exception. If your update document contains
a value that violates unique index rules, the method throws a ``duplicate
key error`` exception.

.. note::

  If your application requires the document after updating,
  consider using the :node-api:`collection.findOneAndUpdate()
  <Collection.html#findOneAndUpdate>`. method, which has a similar
  interface to ``updateOne()`` but also returns the original or updated
  document.

Example
-------

.. literalinclude:: /code-snippets/usage-examples/updateOne.js
  :language: javascript
  :linenos:
